/// <summary>
/// Jenkinsfile principal para despliegue automatizado del proyecto codexy-api.
/// Detecta el entorno seg√∫n la rama:
///   develop ‚Üí .env.dev
///   qa ‚Üí .env.qa
///   staging ‚Üí .env.staging
///   main ‚Üí .env.prod
/// Compila y publica el proyecto .NET 9, construye la imagen Docker,
/// y levanta los servicios del entorno correspondiente con docker-compose.
/// </summary>

pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
    }

    stages {

        // =============================
        // 1Ô∏è‚É£ Detectar entorno din√°mico
        // =============================
        stage('Detectar entorno desde rama') {
            steps {
                script {
                    def branch = env.BRANCH_NAME ?: 'develop'
                    def envMap = [
                        'develop': 'dev',
                        'qa'     : 'qa',
                        'staging': 'staging',
                        'main'   : 'prod'
                    ]

                    def resolvedEnv = envMap.get(branch, 'dev')

                    env.ENVIRONMENT  = resolvedEnv
                    env.ENV_PATH     = "devops/${branch}"
                    env.ENV_FILE     = "${env.ENV_PATH}/.env.${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "${env.ENV_PATH}/docker-compose.yml"

                    echo "üîé Rama actual: ${branch}"
                    echo "üåç Entorno detectado: ${env.ENVIRONMENT}"
                    echo "üìÑ Archivo .env: ${env.ENV_FILE}"
                    echo "üê≥ Archivo docker-compose: ${env.COMPOSE_FILE}"
                }
            }
        }

        // =============================
        // 2Ô∏è‚É£ Restaurar dependencias
        // =============================
        stage('Restaurar dependencias') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:9.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    mkdir -p $DOTNET_CLI_HOME
                    chmod -R 777 $DOTNET_CLI_HOME
                    dotnet restore Web/Web.csproj
                '''
            }
        }

        // =============================
        // 3Ô∏è‚É£ Compilar proyecto
        // =============================
        stage('Compilar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:9.0' }
            }
            steps {
                echo "‚öôÔ∏è Compilando la soluci√≥n codexy-api..."
                sh 'dotnet build Web/Web.csproj --configuration Release'
            }
        }

        // =============================
        // 4Ô∏è‚É£ Publicar proyecto
        // =============================
        stage('Publicar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:9.0' }
            }
            steps {
                echo "üì¶ Publicando binarios..."
                sh 'dotnet publish Web/Web.csproj -c Release -o ./publish'
            }
        }

        // =============================
        // 5Ô∏è‚É£ Construir imagen Docker
        // =============================
        stage('Construir imagen Docker') {
            steps {
                script {
                    echo "üê≥ Construyendo imagen Docker codexy-api:${env.ENVIRONMENT}..."
                    sh """
                        docker build -t codexy-api-${env.ENVIRONMENT}:latest \
                            --build-arg ENVIRONMENT=${env.ENVIRONMENT} \
                            -f Dockerfile .
                    """
                }
            }
        }

        // =============================
        // 6Ô∏è‚É£ Desplegar entorno Compose
        // =============================
        stage('Desplegar entorno con Docker Compose') {
            steps {
                script {
                    echo "üöÄ Desplegando entorno ${env.ENVIRONMENT}..."

                    sh """
                        if [ ! -f ${env.ENV_FILE} ]; then
                            echo '‚ùå ERROR: No se encontr√≥ el archivo ${env.ENV_FILE}'
                            exit 1
                        fi

                        echo "üîó Creando alias .env -> ${env.ENV_FILE} (compatibilidad Compose)..."
                        ln -sf ${env.ENV_FILE} ${env.ENV_PATH}/.env

                        echo "üßπ Limpiando contenedores antiguos..."
                        docker ps -a --filter name=codexy-${env.ENVIRONMENT} -q | xargs -r docker rm -f

                        echo "üì¶ Levantando entorno con docker-compose (${env.COMPOSE_FILE})..."
                        docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                    """
                }
            }
        }

    }

    // =============================
    // ‚úÖ Post-condiciones
    // =============================
    post {
        success {
            echo "‚úÖ Despliegue completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "‚ùå Error durante el despliegue en ${env.ENVIRONMENT}"
        }
    }
}
