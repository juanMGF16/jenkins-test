// pipeline {
//     agent any

//     environment {
//         DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
//         DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
//         DOTNET_NOLOGO = '1'
//         PROJECT_PATH = 'Web/Web.csproj'
//     }

//     stages {

//         // =======================================================
//         // 1Ô∏è‚É£ CHECKOUT
//         // =======================================================
//         stage('Checkout c√≥digo fuente') {
//             steps {
//                 echo "üì• Clonando repositorio desde GitHub..."
//                 checkout scm
//                 sh 'ls -R devops || true'
//             }
//         }

//         // =======================================================
//         // 2Ô∏è‚É£ DETECTAR ENTORNO SEG√öN LA RAMA
//         // =======================================================
//         stage('Detectar entorno') {
//             steps {
//                 script {
//                     // Mapear ramas con entornos
//                     def branch = env.BRANCH_NAME ?: 'develop'  // Si es null, usa 'develop'

//                     switch (branch) {
//                         case 'main':
//                             env.ENVIRONMENT = 'prod'
//                             break
//                         case 'staging':
//                             env.ENVIRONMENT = 'staging'
//                             break
//                         case 'qa':
//                             env.ENVIRONMENT = 'qa'
//                             break
//                         default:
//                             env.ENVIRONMENT = 'develop'  // ‚Üê ¬°Cambia 'dev' por 'develop'!
//                             break
//                     }

//                     env.ENV_DIR = "devops/${env.ENVIRONMENT}"
//                     env.COMPOSE_FILE = "${env.ENV_DIR}/docker-compose.yml"
//                     env.ENV_FILE = "${env.ENV_DIR}/.env.${env.ENVIRONMENT == 'develop' ? 'dev' : env.ENVIRONMENT}"

//                     echo """
//                     ‚úÖ Rama detectada: ${branch}
//                     üåé Entorno asignado: ${env.ENVIRONMENT}
//                     üìÑ Compose file: ${env.COMPOSE_FILE}
//                     üìÅ Env file: ${env.ENV_FILE}
//                     """

//                     if (!fileExists(env.COMPOSE_FILE)) {
//                         error "‚ùå No se encontr√≥ ${env.COMPOSE_FILE}"
//                     }
//                     if (!fileExists(env.ENV_FILE)) {
//                         error "‚ùå No se encontr√≥ ${env.ENV_FILE}"
//                     }
//                 }
//             }
//         }

//         // =======================================================
//         // 3Ô∏è‚É£ COMPILAR Y PUBLICAR .NET
//         // =======================================================
//         stage('Compilar .NET dentro de contenedor SDK') {
//             steps {
//                 script {
//                     docker.image('mcr.microsoft.com/dotnet/sdk:9.0')
//                         .inside('-v /var/run/docker.sock:/var/run/docker.sock -u root:root') {
//                         sh '''
//                             echo "üîß Restaurando dependencias .NET..."
//                             dotnet restore Web/Web.csproj
//                             dotnet build Web/Web.csproj --configuration Release
//                             dotnet publish Web/Web.csproj -c Release -o ./publish
//                         '''
//                     }
//                 }
//             }
//         }

//         // =======================================================
//         // 4Ô∏è‚É£ CONSTRUIR IMAGEN DOCKER
//         // =======================================================
//         stage('Construir imagen Docker') {
//             steps {
//                 dir('.') {
//                     sh """
//                         echo "üê≥ Construyendo imagen Docker para codexy-api (${env.ENVIRONMENT})"
//                         docker build -t codexy-api-${env.ENVIRONMENT}:latest -f Dockerfile .
//                     """
//                 }
//             }
//         }

//         // =======================================================
//         // 5Ô∏è‚É£ DESPLEGAR CON DOCKER COMPOSE
//         // =======================================================
//         stage('Desplegar codexy-api') {
//             steps {
//                 dir('.') {
//                     sh """
//                         echo "üöÄ Desplegando entorno: ${env.ENVIRONMENT}"
//                         docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             echo "üéâ Despliegue completado correctamente para ${env.ENVIRONMENT}"
//         }
//         failure {
//             echo "üí• Error durante el despliegue en ${env.ENVIRONMENT}"
//         }
//         always {
//             echo "üßπ Limpieza final del pipeline completada."
//         }
//     }
// }
pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
        PROJECT_PATH = 'Web/Web.csproj'
    }

    stages {
        stage('Checkout c√≥digo fuente') {
            steps {
                echo "üì• Clonando repositorio desde GitHub..."
                checkout scm
                sh 'ls -R devops || true'
            }
        }

        stage('Detectar entorno') {
            steps {
                script {
                    def branch = env.BRANCH_NAME ?: 'develop'

                    switch (branch) {
                        case 'main':
                            env.ENVIRONMENT = 'production'
                            break
                        case 'staging':
                            env.ENVIRONMENT = 'staging'
                            break
                        case 'qa':
                            env.ENVIRONMENT = 'qa'
                            break
                        default:
                            env.ENVIRONMENT = 'develop'
                            break
                    }

                    env.ENV_DIR = "devops/${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "${env.ENV_DIR}/docker-compose.yml"
                    env.ENV_FILE = "${env.ENV_DIR}/.env.${env.ENVIRONMENT == 'develop' ? 'dev' : env.ENVIRONMENT}"

                    echo """
                    ‚úÖ Rama detectada: ${branch}
                    üåé Entorno asignado: ${env.ENVIRONMENT}
                    üìÑ Compose file: ${env.COMPOSE_FILE}
                    üìÅ Env file: ${env.ENV_FILE}
                    """

                    if (!fileExists(env.COMPOSE_FILE)) {
                        error "‚ùå No se encontr√≥ ${env.COMPOSE_FILE}"
                    }
                    if (!fileExists(env.ENV_FILE)) {
                        error "‚ùå No se encontr√≥ ${env.ENV_FILE}"
                    }
                }
            }
        }

        stage('Preparar red compartida') {
            steps {
                sh "docker network create codexy-network || true"
            }
        }

       stage('Levantar bases de datos (una sola vez)') {
            steps {
                dir('devops/databases') {
                    sh '''
                        echo "üöÄ Levantando contenedor centralizado de bases de datos..."
                        # Usa -f para forzar el uso SOLO de este archivo
                        docker compose -f docker-compose.yml up -d --build
                        echo "‚è≥ Esperando 60 segundos para que las BDs se inicialicen..."
                        sleep 60
                    '''
                }
            }
        }

        stage('Compilar .NET') {
            steps {
                script {
                    docker.image('mcr.microsoft.com/dotnet/sdk:9.0')
                        .inside('-v /var/run/docker.sock:/var/run/docker.sock -u root:root') {
                        sh '''
                            echo "üîß Restaurando dependencias .NET..."
                            dotnet restore Web/Web.csproj
                            dotnet build Web/Web.csproj --configuration Release
                            dotnet publish Web/Web.csproj -c Release -o ./publish
                        '''
                    }
                }
            }
        }

        stage('Construir imagen Docker') {
            steps {
                sh """
                    echo "üê≥ Construyendo imagen Docker para codexy-api (${env.ENVIRONMENT})"
                    docker build -t codexy-api-${env.ENVIRONMENT}:latest -f Dockerfile .
                """
            }
        }

        stage('Desplegar backend') {
            steps {
                dir(env.ENV_DIR) {
                    sh """
                        echo "üöÄ Desplegando backend: ${env.ENVIRONMENT}"
                        docker compose -f docker-compose.yml --env-file .env.${env.ENVIRONMENT == 'develop' ? 'dev' : env.ENVIRONMENT} up -d --build
                    """
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Despliegue completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "üí• Error durante el despliegue en ${env.ENVIRONMENT}"
        }
        always {
            echo "üßπ Limpieza final del pipeline completada."
        }
    }
}