/// <summary>
/// Jenkinsfile principal para despliegue automatizado del proyecto codexy-api.
/// Este pipeline deriva el entorno desde la rama de Git (develop‚Üídev, qa‚Üíqa, staging‚Üístaging, main‚Üíprod),
/// compila el proyecto .NET 9 y ejecuta el docker-compose correspondiente en la carpeta devops.
/// Antes del despliegue, elimina cualquier contenedor previo con el mismo nombre para evitar conflictos.
/// </summary>

pipeline {
    /// <summary>
    /// Define el agente que ejecutar√° el pipeline. 
    /// En este caso 'any' indica que puede correr en cualquier nodo disponible de Jenkins.
    /// </summary>
    agent any

    /// <summary>
    /// Variables de entorno globales usadas durante todo el pipeline.
    /// Configura el comportamiento de .NET CLI y evita logs innecesarios o errores de permisos.
    /// </summary>
    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
    }

    stages {

        /// <summary>
        /// Etapa 1: Detecci√≥n del entorno desde la rama (sin .env ra√≠z).
        /// Define las rutas de docker-compose y del archivo .env correspondiente dentro de devops/.
        /// </summary>
        stage('Detectar entorno desde rama') {
            steps {
                script {
                    // Rama actual (ej. develop, qa, staging, main)
                    def branch = env.BRANCH_NAME ?: 'develop'

                    // Mapeo rama -> entorno
                    def envMap = [
                        'develop': 'dev',
                        'qa'     : 'qa',
                        'staging': 'staging',
                        'main'   : 'prod'
                    ]

                    def resolvedEnv = envMap.get(branch, 'dev')

                    // Variables para el resto del pipeline
                    env.ENVIRONMENT  = resolvedEnv
                    env.ENV_FILE     = "devops/.env.${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "devops/docker-compose.yml"

                    echo "Rama: ${branch}"
                    echo "Entorno detectado: ${env.ENVIRONMENT}"
                    echo "Archivo compose: ${env.COMPOSE_FILE}"
                    echo "Archivo de entorno: ${env.ENV_FILE}"
                }
            }
        }

        /// <summary>
        /// Etapa 2: Restauraci√≥n de dependencias.
        /// Se ejecuta dentro de un contenedor oficial de .NET SDK 9.0.
        /// Restaura los paquetes NuGet necesarios para compilar la soluci√≥n.
        /// </summary>
        stage('Restaurar dependencias') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:9.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    # Crear el directorio para .NET CLI y asignar permisos
                    mkdir -p $DOTNET_CLI_HOME
                    chmod -R 777 $DOTNET_CLI_HOME
                    
                    # Restaurar dependencias del proyecto principal
                    dotnet restore Web/Web.csproj
                '''
            }
        }

        /// <summary>
        /// Etapa 3: Compilaci√≥n del proyecto.
        /// Usa el SDK de .NET 9.0 para compilar el proyecto codexy-api en configuraci√≥n Release.
        /// </summary>
        stage('Compilar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:9.0' }
            }
            steps {
                echo 'Compilando la soluci√≥n codexy-api...'
                sh 'dotnet build Web/Web.csproj --configuration Release'
            }
        }

        /// <summary>
        /// Etapa 4: Despliegue del backend.
        /// Ejecuta el docker-compose del entorno correspondiente para construir e iniciar el contenedor de base de datos.
        /// Antes de levantarlo, limpia cualquier contenedor previo con el mismo nombre para evitar conflictos.
        /// </summary>
        stage('Desplegar entorno SQL Server') {
            steps {
                script {
                    echo "Desplegando entorno SQL Server para codexy-api (${env.ENVIRONMENT})..."

                    // Validar existencia del archivo .env
                    sh """
                        if [ ! -f ${env.ENV_FILE} ]; then
                            echo '‚ùå ERROR: No se encontr√≥ el archivo ${env.ENV_FILE}'
                            exit 1
                        fi
                    """

                    sh """
                        echo "Limpiando contenedores antiguos para ${env.ENVIRONMENT}..."
                        docker ps -a --filter name=codexy-mssql-${env.ENVIRONMENT} -q | xargs -r docker rm -f

                        echo "üß± Levantando entorno con docker-compose..."
                        docker-compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                    """
                }
            }
        }

    }

    /// <summary>
    /// Bloque final del pipeline. 
    /// Define acciones a realizar seg√∫n el resultado del proceso (√©xito o fallo).
    /// </summary>
    post {
        success {
            echo "‚úÖ Despliegue completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "‚ùå Error durante el despliegue en ${env.ENVIRONMENT}"
        }
    }
}
