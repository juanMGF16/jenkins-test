/// <summary>
/// Jenkinsfile principal para despliegue automatizado del proyecto codexy-api.
/// Detecta el entorno a partir de la rama de Git (develop ‚Üí develop, qa ‚Üí qa, staging ‚Üí staging, main ‚Üí production),
/// compila el proyecto .NET 9 y ejecuta el docker-compose correspondiente en la carpeta devops.
/// </summary>

pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
    }

    stages {

        stage('Detectar entorno desde rama') {
            steps {
                script {
                    def branch = env.BRANCH_NAME ?: 'develop'

                    def envMap = [
                        'develop': 'develop',
                        'qa'     : 'qa',
                        'staging': 'staging',
                        'main'   : 'production'
                    ]

                    def resolvedEnv = envMap.get(branch, 'develop')

                    env.ENVIRONMENT  = resolvedEnv
                    env.ENV_FILE     = "devops/${env.ENVIRONMENT}/.env"
                    env.COMPOSE_FILE = "devops/${env.ENVIRONMENT}/docker-compose.yml"
                    env.IMAGE_NAME   = "codexy-${env.ENVIRONMENT}"
                    env.CONTAINER_DB = "codexy-mssql-${env.ENVIRONMENT}"

                    echo "üå± Rama detectada: ${branch}"
                    echo "üì¶ Entorno: ${env.ENVIRONMENT}"
                    echo "üß© Archivo Compose: ${env.COMPOSE_FILE}"
                    echo "üßæ Archivo .env: ${env.ENV_FILE}"
                }
            }
        }

        stage('Restaurar dependencias') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:9.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    mkdir -p $DOTNET_CLI_HOME
                    chmod -R 777 $DOTNET_CLI_HOME
                    dotnet restore Web/Web.csproj
                '''
            }
        }

        stage('Compilar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:9.0' }
            }
            steps {
                echo "üèóÔ∏è Compilando la soluci√≥n codexy-api (.NET 9)..."
                sh 'dotnet build Web/Web.csproj --configuration Release'
            }
        }

        stage('Publicar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:9.0' }
            }
            steps {
                echo "üì¶ Publicando binarios..."
                sh 'dotnet publish Web/Web.csproj -c Release -o /app/publish'
            }
        }

        stage('Construir imagen Docker') {
            steps {
                echo "üê≥ Construyendo imagen Docker para ${env.ENVIRONMENT}..."
                sh """
                    docker build -t ${env.IMAGE_NAME}:latest .
                """
            }
        }

        stage('Desplegar entorno con docker-compose') {
            steps {
                script {
                    echo "üöÄ Desplegando entorno ${env.ENVIRONMENT}..."

                    // Validar existencia de archivos
                    sh """
                        if [ ! -f ${env.ENV_FILE} ]; then
                            echo '‚ùå ERROR: No se encontr√≥ ${env.ENV_FILE}'
                            exit 1
                        fi
                        if [ ! -f ${env.COMPOSE_FILE} ]; then
                            echo '‚ùå ERROR: No se encontr√≥ ${env.COMPOSE_FILE}'
                            exit 1
                        fi
                    """

                    // Detener contenedores antiguos
                    sh """
                        echo "üßπ Limpiando contenedores previos (${env.CONTAINER_DB})..."
                        docker ps -a --filter name=${env.CONTAINER_DB} -q | xargs -r docker rm -f
                    """

                    // Desplegar entorno
                    sh """
                        echo "üß± Levantando servicios con docker-compose..."
                        docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                    """
                }
            }
        }

        stage('Verificar contenedores') {
            steps {
                sh 'docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
            }
        }
    }

    post {
        success {
            echo "‚úÖ Despliegue completado correctamente en ${env.ENVIRONMENT}"
        }
        failure {
            echo "‚ùå Error durante el despliegue en ${env.ENVIRONMENT}"
        }
    }
}
